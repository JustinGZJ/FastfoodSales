//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
  //  action();
  }
#endif

  // Procedures 
#if !NO_EXPORT_MAIN
  // Main procedure 
  public void action(HWindow disp1,HWindow disp2)
  {
    // Local iconic variables 

    HObject ho_Image, ho_Region, ho_Edges, ho_ContoursSplit;
    HObject ho_SingleSegment=null, ho_ContCircle=null;

        // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_WindowID = new HTuple(), hv_AreaRegion = new HTuple();
    HTuple hv_RowCenterRegion = new HTuple(), hv_ColumnCenterRegion = new HTuple();
    HTuple hv_OrientationRegion = new HTuple(), hv_WindowHandleZoom = new HTuple();
    HTuple hv_NumSegments = new HTuple(), hv_NumCircles = new HTuple();
    HTuple hv_RowsCenterCircle = new HTuple(), hv_ColumnsCenterCircle = new HTuple();
    HTuple hv_i = new HTuple(), hv_Attrib = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
    HTuple hv_StartPhi = new HTuple(), hv_EndPhi = new HTuple();
    HTuple hv_PointOrder = new HTuple(), hv_Distance_2_3 = new HTuple();
    HTuple hv_Distance_1_3 = new HTuple(), hv_Distance_4_5 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_SingleSegment);
    HOperatorSet.GenEmptyObj(out ho_ContCircle);
        hv_WindowID = disp1;
        hv_WindowHandleZoom = disp2;
        try
    {
      //This program inspects metal part by fitting lines and circles into contours
      //
      dev_update_off();
      //
      //step: acquire image
      //
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "metal-parts/metal-parts-01");
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.CloseWindow(HDevWindowStack.Pop());
      }
      HOperatorSet.SetWindowAttr("background_color","light gray");
     // HOperatorSet.OpenWindow(0,0,hv_Width,hv_Height,0,"visible","",out hv_WindowID);
      HDevWindowStack.Push(disp1);
      if (HDevWindowStack.IsOpen())
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, hv_Height-1, hv_Width-1);
        }
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetLineWidth(HDevWindowStack.GetActive(), 3);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "white");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
      }
     // set_display_font(hv_WindowID, 16, "momo", "true", "false");
      // stop(...); only in hdevelop
      //
      //step: get center, area, and orientation via region processing
      //
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
      }
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_Image, out ho_Region, 100, 255);
      hv_AreaRegion.Dispose();hv_RowCenterRegion.Dispose();hv_ColumnCenterRegion.Dispose();
      HOperatorSet.AreaCenter(ho_Region, out hv_AreaRegion, out hv_RowCenterRegion, 
          out hv_ColumnCenterRegion);
      hv_OrientationRegion.Dispose();
      HOperatorSet.OrientationRegion(ho_Region, out hv_OrientationRegion);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Region, HDevWindowStack.GetActive());
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowID, "Center Row: "+(hv_RowCenterRegion.TupleString(".5")), 
          "window", 20, 10, "white", "false");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowID, ("Area: "+hv_AreaRegion)+" pixel", "window", 20, 
          300, "white", "false");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowID, "Center Column:  "+(hv_ColumnCenterRegion.TupleString(
          ".5")), "window", 60, 10, "white", "false");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowID, ("Orientation: "+(hv_OrientationRegion.TupleString(
          ".3")))+" rad", "window", 60, 300, "white", "false");
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColor(HDevWindowStack.GetActive(), "gray");
      }
      HOperatorSet.DispCross(hv_WindowID, hv_RowCenterRegion, hv_ColumnCenterRegion, 
          15, 0);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispArrow(hv_WindowID, hv_RowCenterRegion, hv_ColumnCenterRegion, 
          hv_RowCenterRegion-(60*(hv_OrientationRegion.TupleSin())), hv_ColumnCenterRegion+(60*(hv_OrientationRegion.TupleCos()
          )), 2);
      }
      // stop(...); only in hdevelop
      //
      //step: create contours
      //
      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_Image, out ho_Edges, "canny", 0.6, 30, 70);
      //
      //step: segment contours
      //
      ho_ContoursSplit.Dispose();
      HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
          6, 4, 4);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColored(HDevWindowStack.GetActive(), 12);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_ContoursSplit, HDevWindowStack.GetActive());
      }
      // stop(...); only in hdevelop
      //
      //step: open zoom window
      //
      HOperatorSet.SetWindowAttr("background_color","black");
      //HOperatorSet.OpenWindow(0,((hv_Width/2)).TupleRound()
      //    ,(535-225)*2,(395-115)*2,0,"visible","",out hv_WindowHandleZoom);
      HDevWindowStack.Push(disp2);
      if (HDevWindowStack.IsOpen())
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetPart(HDevWindowStack.GetActive(), (new HTuple(115)).TupleRound()
            , (new HTuple(225)).TupleRound(), (new HTuple(395)).TupleRound(), (new HTuple(535)).TupleRound()
            );
        }
      }
      set_display_font(hv_WindowHandleZoom, 18, "mono", "true", "false");
      //
      //step: fit circles into contours
      //
      hv_NumSegments.Dispose();
      HOperatorSet.CountObj(ho_ContoursSplit, out hv_NumSegments);
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
      }
      hv_NumCircles.Dispose();
      hv_NumCircles = 0;
      hv_RowsCenterCircle.Dispose();
      hv_RowsCenterCircle = new HTuple();
      hv_ColumnsCenterCircle.Dispose();
      hv_ColumnsCenterCircle = new HTuple();
      disp_message(hv_WindowHandleZoom, "Circle radii: ", "window", 120, 230, "white", 
          "false");
      HTuple end_val60 = hv_NumSegments;
      HTuple step_val60 = 1;
      for (hv_i=1; hv_i.Continue(end_val60, step_val60); hv_i = hv_i.TupleAdd(step_val60))
      {
        ho_SingleSegment.Dispose();
        HOperatorSet.SelectObj(ho_ContoursSplit, out ho_SingleSegment, hv_i);
        hv_Attrib.Dispose();
        HOperatorSet.GetContourGlobalAttribXld(ho_SingleSegment, "cont_approx", out hv_Attrib);
        if ((int)(new HTuple(hv_Attrib.TupleEqual(1))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_NumCircles = hv_NumCircles+1;
          hv_NumCircles.Dispose();
          hv_NumCircles = ExpTmpLocalVar_NumCircles;
          }
          }
          hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
          HOperatorSet.FitCircleContourXld(ho_SingleSegment, "atukey", -1, 2, 0, 
              5, 2, out hv_Row, out hv_Column, out hv_Radius, out hv_StartPhi, out hv_EndPhi, 
              out hv_PointOrder);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_ContCircle.Dispose();
          HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_Row, hv_Column, 
              hv_Radius, 0, (new HTuple(360)).TupleRad(), "positive", 1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_RowsCenterCircle = hv_RowsCenterCircle.TupleConcat(
              hv_Row);
          hv_RowsCenterCircle.Dispose();
          hv_RowsCenterCircle = ExpTmpLocalVar_RowsCenterCircle;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_ColumnsCenterCircle = hv_ColumnsCenterCircle.TupleConcat(
              hv_Column);
          hv_ColumnsCenterCircle.Dispose();
          hv_ColumnsCenterCircle = ExpTmpLocalVar_ColumnsCenterCircle;
          }
          }
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.DispObj(ho_ContCircle, HDevWindowStack.GetActive());
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          disp_message(hv_WindowHandleZoom, "C"+hv_NumCircles, "window", (hv_Row-hv_Radius)-10, 
              hv_Column, "white", "false");
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          disp_message(hv_WindowHandleZoom, (("C"+hv_NumCircles)+": Radius = ")+(hv_Radius.TupleString(
              ".4")), "window", 275+(hv_NumCircles*15), 230, "white", "false");
          }
        }
      }
      //
      //step: get distance between circle centers
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance_2_3.Dispose();
      HOperatorSet.DistancePp(hv_RowsCenterCircle.TupleSelect(1), hv_ColumnsCenterCircle.TupleSelect(
          1), hv_RowsCenterCircle.TupleSelect(2), hv_ColumnsCenterCircle.TupleSelect(
          2), out hv_Distance_2_3);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispLine(hv_WindowHandleZoom, hv_RowsCenterCircle.TupleSelect(
          1), hv_ColumnsCenterCircle.TupleSelect(1), hv_RowsCenterCircle.TupleSelect(
          2), hv_ColumnsCenterCircle.TupleSelect(2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowHandleZoom, "Distance C2-C3 = "+(hv_Distance_2_3.TupleString(
          ".4")), "window", 275+((hv_NumCircles+3)*15), 230, "magenta", "false");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance_1_3.Dispose();
      HOperatorSet.DistancePp(hv_RowsCenterCircle.TupleSelect(0), hv_ColumnsCenterCircle.TupleSelect(
          0), hv_RowsCenterCircle.TupleSelect(2), hv_ColumnsCenterCircle.TupleSelect(
          2), out hv_Distance_1_3);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispLine(hv_WindowHandleZoom, hv_RowsCenterCircle.TupleSelect(
          0), hv_ColumnsCenterCircle.TupleSelect(0), hv_RowsCenterCircle.TupleSelect(
          2), hv_ColumnsCenterCircle.TupleSelect(2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowHandleZoom, "Distance C1-C3 = "+(hv_Distance_1_3.TupleString(
          ".4")), "window", 275+((hv_NumCircles+2)*15), 230, "yellow", "false");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance_4_5.Dispose();
      HOperatorSet.DistancePp(hv_RowsCenterCircle.TupleSelect(3), hv_ColumnsCenterCircle.TupleSelect(
          3), hv_RowsCenterCircle.TupleSelect(4), hv_ColumnsCenterCircle.TupleSelect(
          4), out hv_Distance_4_5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispLine(hv_WindowHandleZoom, hv_RowsCenterCircle.TupleSelect(
          3), hv_ColumnsCenterCircle.TupleSelect(3), hv_RowsCenterCircle.TupleSelect(
          4), hv_ColumnsCenterCircle.TupleSelect(4));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_WindowHandleZoom, "Distance C4-C5 = "+(hv_Distance_4_5.TupleString(
          ".4")), "window", 275+((hv_NumCircles+4)*15), 230, "cyan", "false");
      }
      // stop(...); only in hdevelop
      //
      //HDevWindowStack.SetActive(hv_WindowHandleZoom);
      //if (HDevWindowStack.IsOpen())
      //{
      //  HOperatorSet.CloseWindow(HDevWindowStack.Pop());
      //}
      //if (HDevWindowStack.IsOpen())
      //{
      //  using (HDevDisposeHelper dh = new HDevDisposeHelper())
      //  {
      //  HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, hv_Height-1, hv_Width-1);
      //  }
      //}
      // dev_update_window(...); only in hdevelop
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_Region.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_SingleSegment.Dispose();
      ho_ContCircle.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WindowID.Dispose();
      hv_AreaRegion.Dispose();
      hv_RowCenterRegion.Dispose();
      hv_ColumnCenterRegion.Dispose();
      hv_OrientationRegion.Dispose();
      hv_WindowHandleZoom.Dispose();
      hv_NumSegments.Dispose();
      hv_NumCircles.Dispose();
      hv_RowsCenterCircle.Dispose();
      hv_ColumnsCenterCircle.Dispose();
      hv_i.Dispose();
      hv_Attrib.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_StartPhi.Dispose();
      hv_EndPhi.Dispose();
      hv_PointOrder.Dispose();
      hv_Distance_2_3.Dispose();
      hv_Distance_1_3.Dispose();
      hv_Distance_4_5.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_Region.Dispose();
    ho_Edges.Dispose();
    ho_ContoursSplit.Dispose();
    ho_SingleSegment.Dispose();
    ho_ContCircle.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_WindowID.Dispose();
    hv_AreaRegion.Dispose();
    hv_RowCenterRegion.Dispose();
    hv_ColumnCenterRegion.Dispose();
    hv_OrientationRegion.Dispose();
    hv_WindowHandleZoom.Dispose();
    hv_NumSegments.Dispose();
    hv_NumCircles.Dispose();
    hv_RowsCenterCircle.Dispose();
    hv_ColumnsCenterCircle.Dispose();
    hv_i.Dispose();
    hv_Attrib.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Radius.Dispose();
    hv_StartPhi.Dispose();
    hv_EndPhi.Dispose();
    hv_PointOrder.Dispose();
    hv_Distance_2_3.Dispose();
    hv_Distance_1_3.Dispose();
    hv_Distance_4_5.Dispose();

  }

#endif


}

